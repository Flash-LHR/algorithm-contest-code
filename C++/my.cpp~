#include <bits/stdc++.h>
using namespace std;

template <typename T>
inline void read(T& x)
{
    x = 0; int f = 1; char ch = getchar();
    while(!isdigit(ch)) {if(ch == '-') f = -1; ch = getchar();}
    while(isdigit(ch))  {x = x * 10 + ch - '0', ch = getchar();}
    x *= f;
}

template <typename T>
void print(T x)
{
    if(x < 0) putchar('-'), x = -x;
    if(x > 9) print(x / 10);
    putchar(x % 10 + '0');
}

template <typename T>
void print(T x, char ch)
{
    print(x), putchar(ch);
}

typedef double db;
typedef long long ll;

const int M = (int)1e2;
const int N = (int)2e6;
const int inf = 0x3f3f3f3f;
const ll mod = (ll)998244353;

int n, m;
int a[M + 5], b[M + 5];
int g[M + 5][M + 5];
int fac[N + 5], invfac[N + 5], inv[N + 5];

void init()
{
    fac[0] = fac[1] = invfac[0] = invfac[1] = inv[1] = 1;
    for(int i = 2; i <= N; ++i)
    {
        fac[i] = 1ll * fac[i - 1] * i % mod;
        inv[i] = 1ll * (mod - mod / i) * inv[mod % i] % mod;
        invfac[i] = 1ll * invfac[i - 1] * inv[i] % mod;
    }
}

int C(int n, int m)
{
    if(n < 0 || m < 0 || m > n) return 0;
    return 1ll * fac[n] * invfac[m] % mod * invfac[n - m] % mod;
}

ll quick(ll a, ll b, ll p = mod)
{
    ll s = 1;
    while(b)
    {
        if(b & 1) s = s * a % p;
        a = a * a % p;
        b >>= 1;
    }
    return s % p;
}

ll getInv(ll n, ll p = mod)
{
    return quick(n, p - 2, p);
}

int gauss(int n, int m)
{
    int c, r, res = 1;
    for(c = 1, r = 1; c <= m; ++c)
    {
        int t = r;
        for(int i = r; i <= n; ++i)
        {
            if(g[i][c] > g[t][c])   t = i;
        }
        if(!g[t][c]) continue;
        if(t != r) res = -res;
        for(int i = c; i <= m; ++i) swap(g[t][i], g[r][i]);
        int INV = getInv(g[r][c]);
        res = 1ll * res * g[r][c] % mod;
        for(int i = m; i >= c; --i) g[r][i] = 1ll * g[r][i] * INV % mod;
        for(int i = 1; i <= n; ++i)
        {
            if(i == r)  continue;
            if(g[i][c])
            {
                for(int j = m; j >= c; --j)
                {
                    g[i][j] = (g[i][j] - 1ll * g[r][j] * g[i][c] % mod + mod) % mod;
                }
            }
        }
        ++r;
    }
    for(int i = 1; i <= n; ++i) res = 1ll * res * g[i][i] % mod;
    return (res % mod + mod) % mod;
}

void work()
{
    read(n), read(m);
    for(int i = 1; i <= m; ++i) read(a[i]), read(b[i]);
    for(int i = 1; i <= m; ++i)
    {
        for(int j = 1; j <= m; ++j)
        {
            int r = b[j] - a[i] + 1, c = n;
            g[i][j] = C(r + c - 2, r - 1);
        }
    }
    print(gauss(m, m), '\n');
}

int main()
{
//    ios::sync_with_stdio(0);
//    cin.tie(0); cout.tie(0);
//    freopen("input.txt", "r", stdin);
//    freopen("output.txt", "w", stdout);
    init();
    int T; read(T);
    for(int ca = 1; ca <= T; ++ca)
    {
        work();
    }
//    work();
//    cerr << 1.0 * clock() / CLOCKS_PER_SEC << "\n";
    return 0;
}
